// macro_export表示宏导出注解，表示当这个宏所定义的crate被引入作用域，即宏就可以使用了
#[macro_export]
// macro_rules后面的内容表示开始定义声明宏 这里的vec表示宏的名称，
// 用{}扩起来表示宏体
macro_rules! vec {
    // ()表示定义一种匹配模式
    // $( $x:expr )表示捕获和匹配模式的任意值，这些匹配的值会被用于后续的代码替换，这个模式可以匹配任意的Rust的表示式并赋予给$x
    // *表示可以匹配0次和任意多次
    /*
       如果执行代码中定义是：vec![1, 2, 3]
       根据模式它会被匹配3次，第一次会先匹配到1，将1这个表达式赋予给$x，第二次匹配2，第三次匹配3
     */
    ( $( $x:expr ), * ) => { // 这里表示和当前匹配模式所对应的代码块，也就是宏匹配成功了这个分支之后就会执行这个代码块，这个代码会根据匹配到的$x去生成代码
        {
            let mut temp_vec = Vec::new();
            // $()表示会对每个匹配的表达式生成所以定义的代码
            // 这里由于匹配了三次，就会生成3次代码，分别为：
            // temp_vec.push(1);
            // temp_vec.push(2);
            // temp_vec.push(3);
            $(
                temp_vec.push($x);
            )*
            temp_vec
        }
    };
}